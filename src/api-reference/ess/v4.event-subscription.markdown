---
title: Event Subscription Service v4
layout: reference
---

# Event Subscription Service v4

The Event Subscription Service (ESS) implements the Publish/Subscribe pattern using principles of Event Driven Architecture in the SAP Concur platform. It allows clients and partners to be notified through web services when certain actions take place in connected companies. When the business/system event occurs ESS sends that event to the configured endpoint with relevant information.

* **Event** - a state of a business/system object or entity. Always has an `EventType` that represents a type of entity change or specific state in a workflow. Example: StatusChanged, etc.
* **Topic** - a stream of events of business/system object or entity. Example: `public.concur.expense.report`, `public.concur.travel.request`.
* **Subscription** - a topic consumer. Each subscription has a topic it is subscribed to.  
* **Webhook** - an ESS application that uses a subscription model and delivers events to the endpoint.

In order to begin receiving events, you must first subscribe to the relevant topic(s) for your application. To subscribe to an event, you must work with your relevant SAP Concur technical contact; for partners, please work with your technical enablement contact. For customers, your web services consultant will subscribe on your behalf to the relevant topic(s).

## Limitations

Access to this documentation does not provide access to the API.

## Scope Usage <a name="scope-usage"></a>

There are two levels of scopes required for creating subscription.

Name                | Description                       | Endpoint       
------------------- | --------------------------------- | ----------------------
`events.topic.read` | Access to ESS API                 | GET, POST, PUT, DELETE
`%topic scope%`     | Access to specific topic (events) | GET, POST, PUT, DELETE

* If application has only the `events.topic.read` scope an empty list of topics will always be returned.
* See the [Event Topics](https://developer.concur.com/event-topics/) section for the various Topics and corresponding required scope(s).

## Process Flow <a name="process-flow"></a>

![Process flow for ESS](./ess-process-flow.png)

## Access Control <a name="access-control"></a>

ESS requires a caller to have a proper JWT and scopes, for more details please see the [Scopes](/api-reference/authentication/scopes.html) documentation. A caller must have the following types of scopes:

* The ESS API level scope `events.topic.read` is required to be able to access ESS API.
* A resource level scope, for example `expense.report.read` is required to be able to access the `public.concur.expense.request` topic and to be able to create subscriptions to that topic.

All required scopes can be requested for a caller application by the Partner Enablement team for Partner applications. For clients who have purchased Client Web Services to develop their own application, the Oauth Client Service Tool (OCST) can be used to assign scopes if the Authentication Admin role has been assigned to the proper admin user.

## ESS Delivery Model <a name="ess-delivery"></a>

It is important to remember that ESS doesn't have an API that you can call for events, ESS delivers events to your endpoint.

* It uses an outbound callout where the SAP Concur offering calls a public facing URL provided by client or partner, which is a web server hosted by the third-party developer or client.
* The application endpoint can also use the related web services to retrieve or send SAP Concur data. For example, an event may be generated when a request for travel is submitted. The application endpoint may then leverage data from the event, such as the request ID, to retrieve the relevant travel request record from the published Request APIs.

## Endpoint Requirements <a name="endpoint-requirements"></a>

ESS guarantees at least once event delivery. This is accomplished through the retry posting the event payload to the subscribers' endpoint until the response indicates successful receipt. The expected maximum acknowledgment time for a request to the subscribers' endpoint is 60 seconds. The service will attempt posting to the endpoint and then hold and retry until the subscriber endpoint responds with delivered or not accepted. The service will retry at least 3 days and skip to the next event after unsuccessful delivery.  We suggest that the subscriber considers the following:

* Expected maximum throughput is _directly_ tied to the response time of the subscriber endpoint. If response time is too high, it's possible that the subscriber falls behind on event delivery. Please review the topic documentation for throughput.
* Even though we permit up to a maximum response time of 60 seconds before timing out & retrying, that should not be considered a suggestion. In most cases, the subscriber endpoint response time will need to be measured in just a few seconds _at most_ in order to keep up with event traffic.
* It is highly recommended to implement a queue behind the subscriber' endpoint in order to keep response time as low as possible.
* The subscriber must maintain a reasonable uptime to support the requirements of the integration scenario.
* Your HTTPS server endpoint must be accessible from the public web with a non-self-signed certificate.  The certificate should be signed by a known Certificate Authority and should be reachable through DNS.

## ESS Authentication <a name="ess-authentication"></a>

We strongly recommend you use the certificate Common Name as the authentication mechanism to ensure your endpoint is accessed by our service. We will always use the same client [x509 certificate](./2026.webhook.api.concursolutions.com.pem) (Intermediate and Root CA can be found [here](https://github.com/SAP-docs/preview.developer.concur.com/tree/main/src/api-reference/ess)). The common name is `C=DE, ST=Baden-Württemberg, L=Walldorf, O=SAP SE, CN=webhook.api.concursolutions.com`.

We will always use a digital signature, supplied in the request header `Concur-Signature`. If you decide to use this authentication method you will need our Public Key.

After October 22, 2025:
```
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuE2x914aLmJa9GSzVVcT
e6CEi3afbs84RIEhRoLO8oK2nBKKS0fyRfZtzUZIiD0kcjBjeLrMjJpC5oI6f709
DpGQSgL1ytzP9dnIp/n1lcCk88NA+ihJlHwB6gNX6lMbftTbCpxvkY6PZmjZfnw/
/Ito5iM2P2IY7oxK8GsYWXLnnMDw9ONnvxfPLoZLGxYXXs+zR2yGFiZ0wPRY6QJ+
NT0xusN2nacPPwtgQQoD/oh7QMaBhXZ7WLSM0Gm68/c2lzMjQjtXgwAyy1+5h4EH
YhasT+p98Q0P3LpMcX9wZN3hMqbhRiRaJAQffCdYgk2Kv6EjE2l88K8kXdsocIZc
iQIDAQAB
-----END PUBLIC KEY-----
```

Before October 22, 2025:
```
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2wJd8TVDGUxD00bCqemz
cptSfm7VGNa8Bm2DIpmqobzN6jv/HNzI3HPjeqcP1GtA4vjoFkFRaW2Qs286cI7e
9GcLbJP4mzww97LfbZYGTI+9SAlxDKEZl/AWbwTi6P8lOxho8fQ4Sv4eSK7hyL3l
I82XdBYJ2JWRpEQ1hZOui1f0BlFyqFVrEbzolE6S0eeP3gb1szFELz8ES5T4/T0o
Tz1KZE2knMsugAz760Mlmc7EuLutnNhfCZQypNUZ9fI2CMSZWHZa8IH9MCz/ywuE
NYp3hlsu0Q+oYeAwpDKyoWNLcV8pKaStVnP+3yn+/J3/oK4Rtqz/lKRrepxwTVRA
1wIDAQAB
-----END PUBLIC KEY-----
```

## ESS Behavior<a name="ess-behavior"></a>

The Event Subscription service has the following characteristics from the subscriber perspective:

* Requests will come from `us.api.concursolutions.com`, `emea.api.concursolutions.com`, or `cn.api.concursolutions.com`.
* Connection will always be established using a mutual TLS with `webhook.api.concursolutions.com` x509 certificate.
* Requests will always have a digital signature.
* Requests _will_ be re-tried when:
  * the subscriber endpoint responds with HTTP Response Code(s): 5xx, 401, 403, or 429.
  * any I/O error occurs during the HTTP request, regardless of the actual HTTP response from the subscriber endpoint.
    * examples include, but are not limited to: read timeout, connection refused, broken pipe/unexpected connection close, etc.
* Requests _will not_ be re-tried when subscriber endopint responds with HTTP Response Code(s):
  * 2xx – Indicates successful receipt of the event.
  * 4xx – Indicates posted event is unexpected or incorrectly formatted.
* Request will be retried until delivery OR event retention period expiration.
* Event retention period is 72 hours from the time of event being published.
* Events are not archived, but all of the event delivery attempts/responses are logged and retained for 30 days.

## ESS Resourse usage<a name="ess-resources"></a>

Every ESS subscription is a separate application with dedicated resources. In order to make sure that resources are used efficiently we have several limitations and guidelines.

* Each application can have up to 5 subscriptions.
* Subscriptions that are not working properly will be deleted after 30 days. This includes unused subscriptions with incomplete setup (missing company ids) and subscriptions with no successful deliveries due to endpoint errors.
* When creating a new subscription please choose a name that reflects the subscription purpose or workflow, eg. test, prod, etc.
* Please make sure you delete your unused subscriptions created for testing purposes after testing is complete.

## ESS Troubleshooting<a name="ess-troubleshooting"></a>

We highly recommend reusing the Concur HTTP header Concur-Correlationid that is included with every event when making subsequent calls to the Concur API based on the details provided in the ESS event.

The Concur-Correlationid is a unique identifier used by Concur to link all calls within a workflow, making troubleshooting significantly easier. Providing this ID will greatly assist Concur Support in resolving your issue more efficiently.

When contacting Concur Support, please have the following information ready:

1. Environment
2. Subscription ID / Name
3. Application ID
4. Concur-Correlationid


## Related Topics

* [Event Topic Subscription Management](/event-topics/index.html)
